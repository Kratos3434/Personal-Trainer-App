// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["rhel-openssl-1.0.x", "native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserAccount {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  profile Profile?
  otp OTP?
  verified  Boolean   @default(false)
  provider String?
  createdAt DateTime  @default(now())
  updatedAt DateTime?
}

model OTP {
  id Int @id @default(autoincrement())
  otp String @unique
  userId Int @unique
  userAccount UserAccount @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime?
}

model Profile {
  id                Int             @id @default(autoincrement())
  userAccount       UserAccount?     @relation(fields: [userId], references: [id])
  userId            Int?             @unique
  firstName         String
  lastName          String
  dob               DateTime?
  gender            String?
  bodyMeasurementId Int? @unique
  weeklyRoutines Weekly_Routine[]
  initBodyMeasurement BodyMeasurement? @relation(fields: [bodyMeasurementId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime?
}

model BodyMeasurement {
  id      Int      @id @default(autoincrement())
  weight  Float
  date    DateTime @default(now())
  chest   Int?
  abdomen Int?
  thigh   Int?
  bypassMeasurementFlag Boolean
  bodyFatPercent        Float
  muscleMass            Float
  profile Profile?
}

model equipmentStatus {
  id                  Int    @id @default(autoincrement())
  equipmentStatusDesc String
  equipmentWeight     Int
}

model Weekly_Routine {
  id Int @id @default(autoincrement())
  profileId Int
  profile Profile @relation(fields: [profileId], references: [id])
  startDate DateTime
  endDate DateTime
  daysPerWeek Int
  workoutEnvironmentId Int
  workoutEnvironment Workout_Environment @relation(fields: [workoutEnvironmentId], references: [id])
  dailyRoutines Daily_Routine[]
}

model Workout_Environment {
  id Int @id @default(autoincrement())
  weeklyRoutines Weekly_Routine[]
  exercises Workout_Environment_Juction[]
}

model Daily_Routine {
  id Int @id @default(autoincrement())
  dayNumber Int
  weeklyRoutineId Int
  weeklyRoutine Weekly_Routine @relation(fields: [weeklyRoutineId], references: [id])
  exerciseDetails Exercise_Details[]
}

model Exercise_Details {
  id Int @id @default(autoincrement())
  sets Int
  reps Int
  youtubeURL String
  dailyRoutineId Int
  dailyRoutine Daily_Routine @relation(fields: [dailyRoutineId], references: [id])
  exerciseId Int
  exercise Exercise @relation(fields: [exerciseId], references: [id])
}

model Exercise {
  id Int @id @default(autoincrement())
  name String
  intensity Int
  defaultSets Int
  defaultReps Int
  exerciseDetails Exercise_Details[]
  levelId Int
  level Level @relation(fields: [levelId], references: [id])
  workoutEnvironments Workout_Environment_Juction[]
  requiredEquipmentId Int
  requiredEquipment Required_Equipment @relation(fields: [requiredEquipmentId], references: [id])
  muscleGroups Muscle_Group_Junction[]
}

model Level {
  id Int @id @default(autoincrement())
  description String
  exercises Exercise[]
}

model Workout_Environment_Juction {
  workoutEnvironmentId Int
  workoutEnvironment Workout_Environment @relation(fields: [workoutEnvironmentId], references: [id])
  exerciseId Int
  exercise Exercise @relation(fields: [exerciseId], references: [id])
  createdAt DateTime @default(now())

  @@id([workoutEnvironmentId, exerciseId])
}

model Required_Equipment {
  id Int @id @default(autoincrement())
  description String
  exercises Exercise[]
}

model Muscle_Group_Junction {
  exerciseId Int
  exercise Exercise @relation(fields: [exerciseId], references: [id])
  muscleGroupId Int
  muscleGroup Muscle_Group @relation(fields: [muscleGroupId], references: [id])

  @@id([exerciseId, muscleGroupId])
}

model Muscle_Group {
  id Int @id @default(autoincrement())
  description String
  exercises Muscle_Group_Junction[]
}